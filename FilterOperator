=====================================
<---ofType---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace LinqExamples
{
    class Student
    {
	public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int StudentAge { get; set; }
        
        static void Main(string[] args)
        {
          
            ArrayList list = new ArrayList();
            list.Add(1);
            list.Add("India");
            list.Add("Australia");
            list.Add(new Student { StudentID = 101 , StudentAge=21, StudentName="Sumit" });
            list.Add(4);
            list.Add("China");

            var countries = list.OfType<string>();
            var students = list.OfType<Student>();

            foreach (var c in countries)
                Console.WriteLine(c);

            foreach (var s in students)
                Console.WriteLine(s.StudentName);
        }
    }
}
=================Where====================
<---MultipleWhere---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqExamples
{
    class Student
    {

        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int StudentAge { get; set; }

        static void Main(string[] args)
        {
            IList<Student> students = new List<Student>();
            students.Add(new Student { StudentID=101, StudentName="Deepak", StudentAge=19 });
            students.Add(new Student { StudentID = 102, StudentName = "Abhay", StudentAge = 16 });
            students.Add(new Student { StudentID = 103, StudentName = "Sumit", StudentAge = 20 });
            students.Add(new Student { StudentID = 104, StudentName = "Rohit", StudentAge = 23 });


            var studentlist = students.Where(s => s.StudentID <= 103).Where(s => s.StudentAge > 18);
          
            Console.WriteLine("---------------List of selected Students------------");
            foreach (var s in studentlist)
                Console.WriteLine(s.StudentName);
 
        }
    }
}
=================Where====================
<---SingleWhere---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqExamples
{
    class Student
    {

        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int StudentAge { get; set; }

        static void Main(string[] args)
        {
            IList<Student> students = new List<Student>();
            students.Add(new Student { StudentID=101, StudentName="Deepak", StudentAge=17 });
            students.Add(new Student { StudentID = 102, StudentName = "Abhay", StudentAge = 16 });
            students.Add(new Student { StudentID = 103, StudentName = "Sumit", StudentAge = 20 });
            students.Add(new Student { StudentID = 104, StudentName = "Rohit", StudentAge = 23 });

            //first way 
            Func<Student, bool> teenager = s => s.StudentAge > 18;
            var teenagers = students.Where(teenager);

            //second way
            var studentlist = students.Where(s=>s.StudentID<=103); // here we will pass the lambda statement directly as the parameter to where method..

            Console.WriteLine("---------------List of Teenagers-----------------");
            foreach (var s in teenagers)
                Console.WriteLine(s.StudentName);


            Console.WriteLine("---------------List of selected Students------------");
            foreach (var s in studentlist)
                Console.WriteLine(s.StudentName);
 
        }
    }
}
=================Where====================
<----SingleWhereExample---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqExamples
{
    class Student
    {
        static void Main(string[] args)
        {
           
            string[] words = { "humpty", "dumpty", "set", "on", "a", "wall" };

            IEnumerable<string> query = words.Where(w => w.Length > 3);
            foreach (string str in query)
                Console.WriteLine(str);
            Console.ReadLine();  
        }
    }
}

=================Where====================
<----SingleWhereForEliminatingNullorEmpty---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqExamples
{
    class Student
    {

        static void Main(string[] args)
        {
          
            string[] students = { "Deepa", null, "Rohit", "", "Sumit", null,"Amit" };
            var stud = students.Where(s => s != null);

            Console.WriteLine("Displaying Not null names ");
            foreach (var s in stud)
                Console.WriteLine(s);

            // above programs only filters the nulls and displays only not null values...

            Console.WriteLine("Displaying Not null and not empty names ");
            var studd = students.Where(s => !string.IsNullOrEmpty(s));
            foreach (var s in studd)
                Console.WriteLine(s);
        }
    }
}


=================Where====================
<----Wherewith2parameters---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinqExamples
{
    class Student
    {

        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int StudentAge { get; set; }

        static void Main(string[] args)
        {
            IList<Student> students = new List<Student>();
            students.Add(new Student { StudentID=101, StudentName="Deepak", StudentAge=19 });
            students.Add(new Student { StudentID = 102, StudentName = "Abhay", StudentAge = 16 });
            students.Add(new Student { StudentID = 103, StudentName = "Sumit", StudentAge = 20 });
            students.Add(new Student { StudentID = 104, StudentName = "Rohit", StudentAge = 23 });


            var studentlist = students.Where((s, i) => i%2==0); 
            // above (s,i) contains two parameters first s which denotes the object of Student class and other denotes the index of each elements starting from 0.
            // hence above code will return only those students which are at even index.
          
            Console.WriteLine("---------------List of selected Students------------");
            foreach (var s in studentlist)
                Console.WriteLine(s.StudentName);
 
        }
    }
}
