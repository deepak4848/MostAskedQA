====================================
<--AggregateExample1--->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace ConsoleApplication1
{



    class Program
    {

        public static void Main()
        {
            string sentence = "I am proud to be an Indian";

            string[] words = sentence.Split(' ');

            string newsentence = words.Aggregate((w1, w2) => w1 + "-" + w2);

            Console.WriteLine(newsentence);
        }

    }
}
===========================
<---AggregateExample2-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;

namespace ConsoleApplication1
{



    class Program
    {

        public static void Main()
        {
            string sentence = "I am proud to be an Indian";

            string[] words = sentence.Split(' ');

            string newsentence = words.Aggregate((w1, w2) => w2 + "-" + w1);

            Console.WriteLine(newsentence);
        }

    }
}
===========================
<---AggregateExample3-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    
    class myclass
    {
        static void Main(string[] args)
        {

            int[] num = { 1, 3, 4, 5, 6, 7, 8 };
            int total = num.Aggregate((a, b) => a + b);
            Console.WriteLine(total);
          
        }
    }
}
===========================
<---AggregateExample4-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

            IList<Student> studentList = new List<Student>() { 
        new Student() { StudentID = 1, StudentName = "John", Age = 13 } ,
        new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
        new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
        new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
        new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
    };

        string commaSeparatedStudentNames = studentList.Aggregate(
                                        "Student Names: ",  // seed value
                                        (str, s) => str += s.StudentName + "," );
        Console.WriteLine(commaSeparatedStudentNames);
          
        }
    }
}
===========================
<---AggregateExample5-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

            IList<Student> studentList = new List<Student>() { 
        new Student() { StudentID = 1, StudentName = "John", Age = 13 } ,
        new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
        new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
        new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
        new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
    };

        int totalage = studentList.Aggregate(
                                            0,  // seed value
                                            (str, s) => str += s.Age);
        Console.WriteLine("Total Age : " + totalage);
          
        }
    }
}
===========================
<---AggregateExample6-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

            IList<Student> studentList = new List<Student>() { 
        new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
        new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
        new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
        new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
        new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
    };

  string commaSeparatedStudentNames = studentList.Aggregate<Student, string,string>(
                                            String.Empty, // seed value
                                            (str, s) => str += s.StudentName + ",", // returns result using seed value, String.Empty goes to lambda expression as str
                                            str => str.Substring(0,str.Length - 1 )); // result selector that removes last comma
            Console.WriteLine(commaSeparatedStudentNames);
        }
    }
}
=========================
<---AvergareExample-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

                               IList<Student> studentList = new List<Student>() { 
                            new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
                            new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
                            new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
                            new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
                            new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
                        };

                    var avgAge = studentList.Average(s => s.Age);

                    Console.WriteLine("Average Age of Student: {0}", avgAge);
        }
    }
}
==============================
<------CountExampale----->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

                               IList<Student> studentList = new List<Student>() { 
                            new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
                            new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
                            new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
                            new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
                            new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
                        };

                               var numOfStudents = studentList.Count();
                               var numOfTeenagers = studentList.Count(s => s.Age >= 18);

                               Console.WriteLine("Number of Students: {0}", numOfStudents);
                               Console.WriteLine("Number of Teenagers: {0}", numOfTeenagers);
        }
    }
}
==========================
<-----MaxExample---->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }
    }
    class myclass
    {
        static void Main(string[] args)
        {

                               IList<Student> studentList = new List<Student>() { 
                            new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
                            new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
                            new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
                            new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
                            new Student() { StudentID = 5, StudentName = "Ron" , Age = 15 } 
                        };


                               var maxage = studentList.Max(s => s.Age);

                               Console.WriteLine(maxage);
                               
        }
    }
}
=========================================
<-------MaxExampleWithComparable------>
acusing System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication2
{
    class Student : IComparable<Student>
    {
        public int StudentID { get; set; }
        public string StudentName { get; set; }
        public int Age { get; set; }


        // Note : // IF we run this program without implementing and using the below method then we get the below error
        //At least one object must implement IComparable because studentlist holds the list of instances of Student class..
                              
        public int CompareTo(Student s)
        {
            if (this.StudentName.Length > s.StudentName.Length)
                return 1;
            return 0;
        }
    }
    class myclass
    {
        static void Main(string[] args)
        {

                            IList<Student> studentList = new List<Student>() { 
                            new Student() { StudentID = 1, StudentName = "John", Age = 13} ,
                            new Student() { StudentID = 2, StudentName = "Moin",  Age = 21 } ,
                            new Student() { StudentID = 3, StudentName = "Bill",  Age = 18 } ,
                            new Student() { StudentID = 4, StudentName = "Ram" , Age = 20} ,
                            new Student() { StudentID = 5, StudentName = "Ronika" , Age = 15 } 
                        };


                               var student = studentList.Max();

                               Console.WriteLine("Student Name : " + student.StudentName);
        }
    }
}
